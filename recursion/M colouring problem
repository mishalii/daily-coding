class Solution{
public:



    bool issafe(int node,int colour[],bool graph[101][101],int n,int col)//col denotes the colour i am trying to do on that node
    {
        for(int k=0;k<n;k++)// travel all the adjacent nodes
        //conditions
        // not qual to node itself
        // it is  an adjacent node
        // if it contains the same col which my node contains
        {
            if(k!= node && graph[k][node]==1 && colour[k]==col)
            {
                return false;
            }
        }
        
        return true;
    }
    
    bool solve(int node,int colour[], int m ,int n, bool graph[101][101])
    {
        if(node==n)
        {
            return true; //means we have successfully coloured all nodes
        }
        
        for(int i=1;i<=m;i++)
        {
            if(issafe(node,colour,graph,n,i))
            {
                colour[node]=i;
                if(solve(node+1,colour,m,n,graph)) return true;
                
                colour[node]=0;//backtrack;
            }
            
        }
        
        return false;
    }
    // Function to determine if graph can be coloured with at most M colours such
    // that no two adjacent vertices of graph are coloured with same colour.
    bool graphColoring(bool graph[101][101], int m, int n) {
        // your code here
        
        int colour[n]={0};// to keep track of which node is coloured with what colour;
        if (solve(0,colour,m,n,graph)) return true;
        
        return false;
    }
};
